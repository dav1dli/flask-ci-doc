/**
* Sample Jenkinsfile
* It shows hot to build a Docker image
 */
pipeline {
  agent {
    node {
      label 'python'
    }
  }
  options {
    timeout(time: 10, unit: 'MINUTES')
  }
  environment {
    templatePath = 'ssh://rmp-bot@gerrit.it.here.com:29418/olp/ingestion'
    templateName = 'flask-app'
    servicePort = '8080'
  }
  stages {
    stage('Init') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              echo "Using project: ${openshift.project()}"
            }
          }
        }
        sh 'python --version'
        sh 'pip --version'
        sh 'rm -rf .git jenkins-agent flask-app'
      }
    }
    stage('SCM') {
      steps {
        git url: 'https://github.com/dav1dli/flask-ci-doc.git'
      }
    }
    stage('Test') {
      steps {
        dir ('flask-app') {
          sh '''
            pip install -r requirements.txt --user
            python run.py &
            nosetests . --with-xunit
          '''
          junit "nosetests.xml"
        }
      }
    }
    stage('NewBuild') {
      when {
        expression {
          openshift.withCluster() {
            openshift.withProject() {
              return !openshift.selector("bc", "${templateName}").exists();
            }
          }
        }
      }
      steps{
        echo "Create Docker image Build"
        dir ('flask-app') {
          script {
            openshift.withCluster() {
              openshift.withProject() {
                openshift.newBuild("--name=${templateName}", "--strategy docker", "--binary=true")
              }
            }
          }
        }
      }
    }
    stage('Build') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              openshift.selector("bc", "${templateName}").startBuild("--from-dir=flask-app", "--wait=true")
            }
          }
        }
      }
    }
    stage('Deploy') {
      when {
        expression {
          openshift.withCluster() {
            openshift.withProject() {
              return !openshift.selector("dc", "${templateName}").exists();
            }
          }
        }
      }
      steps{
        echo "Deploy docker image build"
          script {
            openshift.withCluster() {
              openshift.withProject() {
                def app = openshift.newApp("${templateName}:latest")
                app.narrow("svc").expose("--port=${servicePort}")
                def dc = openshift.selector("dc", "${templateName}")
                while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                    sleep 10
                }
              }
            }
          }
      }
    }
    stage('TestAPI') {
      when {
        expression {
          openshift.withCluster() {
            openshift.withProject() {
              return openshift.selector("route", "${templateName}").exists();
            }
          }
        }
      }
      steps{
        echo "Test deployed build"
          script {
            openshift.withCluster() {
              openshift.withProject() {
                def route = openshift.selector("route", "${templateName}")
                sh "curl -v http://`oc get route ${templateName} -o jsonpath='{.spec.host}'`"
              }
            }
          }
      }
    }
  }
}
